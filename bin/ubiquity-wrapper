#! /usr/bin/python3

# Wrapper script to run Ubiquity as root using the appropriate privilege
# escalation method for the frontend.

import os
import sys

sys.path.insert(0, '/usr/lib/ubiquity')

from ubiquity import osextras


def main():
    newargv = []
    frontend = None
    toexec = []

    i = 1
    while i < len(sys.argv):
        if not sys.argv[i].startswith('-'): #A: True
            frontend = sys.argv[i]
        elif sys.argv[i] == '--autopilot':
            try:
                os.environ['GTK_MODULES'] += os.pathsep + 'autopilot'
            except KeyError:
                os.environ['GTK_MODULES'] = 'autopilot'
        newargv.append(sys.argv[i])
        i += 1

    if os.getuid() == 0: #A: True. uid 0 is root
        # no privilege escalation required
        inner = ['/usr/lib/ubiquity/bin/ubiquity'] + newargv #A: newargv = ['gtk_ui']

        # Make sure ibus works
        if (os.getenv("GTK_IM_MODULE") == "ibus" and #A: False GTK_IM_MODULE is unset
                os.getenv("XDG_SESSION_COOKIE")):    #A:       XDG_SESSION_COOKIE is unset
            ibus_path = os.path.expanduser("~/.config/ibus/bus")
            if os.path.exists(ibus_path):
                # Guess the path to the ibus config file
                ibus_filename = "%s-unix-0" % (
                    os.getenv("XDG_SESSION_COOKIE").split("-")[0])
                ibus_config = os.path.join(ibus_path, ibus_filename)
                with open(ibus_config, "r") as fp:
                    for line in fp:
                        fields = line.strip().split('=', 1)
                        # If we get KEY=VALUE, export it in the environment
                        if len(fields) == 2:
                            os.environ[fields[0]] = fields[1]

        # Ensure the OOM killer doesn't nom on us.
        #A: Out Of Memory Killer. Set the process score to the lowest (-1000) to make it immune to killing.
        #A: https://www.baeldung.com/linux/memory-overcommitment-oom-killer#protecting-the-process-from-the-oom-killer
        with open('/proc/%d/oom_score_adj' % os.getpid(), 'w') as fp:
            fp.write('-1000')

        # Disable storage automounting
        #A: udisks2-inhibit is a shell script. Per it's comments it purpose is to "Avoid udisks mounting while a program is running. This is mostly useful for installers."
        udisks2 = '/usr/lib/udisks2/udisks2-inhibit'
        if os.path.isfile(udisks2) and os.access(udisks2, os.X_OK): #A: True
            toexec += [udisks2] + inner #A: toexec = ['/usr/lib/udisks2/udisks2-inhibit', '/usr/lib/ubiquity/bin/ubiquity', 'gtk_ui']
        elif osextras.find_on_path('udisks'):
            toexec += ['udisks', '--inhibit', '--'] + inner
        elif (osextras.find_on_path('hal-lock') and
              not os.system('pgrep hald>/dev/null')):
            toexec += ['hal-lock',
                       '--interface', 'org.freedesktop.Hal.Device.Storage',
                       '--exclusive', '--run', ' '.join(inner)]
        else:
            toexec += inner
    else:
        if frontend is None:
            # Try to detect which frontend will be used by looking for a
            # frontend module.
            from importlib import util
            frontend_names = ['gtk_ui', 'kde_ui']
            for f in frontend_names:
                if util.find_spec('ubiquity.frontend.%s' % f) is not None:
                    frontend = f
                    break
            if frontend is None:
                raise AttributeError('No frontend available; tried %s' %
                                     ', '.join(frontend_names))

        toexec = ['pkexec', sys.argv[0]]
        toexec.extend(newargv)

    if 'UBIQUITY_WRAPPER_DEBUG' in os.environ: #A: False
        print(toexec, file=sys.stderr)

    #A: Run `udisks2-inhibit ubiquity gtk_ui` (shortened)
    #A: execvp executes a new program using the same process (the pid is the same) and preserves the environment.
    #A: In this source code '/usr/lib/ubiquity/bin/ubiquity' is 'bin/ubiquity', so look there next.
    os.execvp(toexec[0], toexec)
    sys.exit(127)


if __name__ == '__main__':
    main()
